{"version":3,"file":"gaateschema-form-react.js","sources":["../../src/createForm.jsx","../../src/reducer.js"],"sourcesContent":["import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport defaultTransformer from 'gateschema-transformer'\n\nfunction debounce(func, wait) {\n  let tId\n  return function() {\n    clearTimeout(tId)\n    tId = setTimeout(() => {\n      tId = null\n      func.apply(this, arguments)\n    }, wait)\n  }\n}\n\nexport function createForm(options = {}) {\n  const { StateForm, transformer = defaultTransformer } = options\n\n  class GateSchemaForm extends Component {\n    static contextTypes = {\n      store: PropTypes.object\n    }\n    static propTypes = {\n      schema: PropTypes.object.isRequired,\n      value: PropTypes.any,\n      name: PropTypes.string,\n      debounce: PropTypes.number,\n      ignoreErrors: PropTypes.object\n    }\n    constructor(props, context) {\n      super(props, context)\n      const {schema, value, name, debounce }  = props\n\n      this.cache = {}\n      this.errors = []\n      this.activePaths = {}\n      this.validationOptions = {\n          skipAsync: true,\n          useCache: true\n      }\n      this.pathValidationOptions = {}\n\n      this.state = {\n        schema: schema,\n        value: value,\n        formState: null\n      }\n\n      this.setValueOfFormPath = name \n        ? this.setValueOfFormPathViaRedux \n        : this.setValueOfFormPathDirectly\n\n      this.renderSchemaDebounced = debounce \n        ? debounce(this.renderSchema, debounce) \n        : this.renderSchema\n\n      if (props.schema) {\n        this.renderSchema()\n      }\n    }\n    setValueOfFormPathDirectly(path, value, parentValue, key) {\n      parentValue[key] = value\n    }\n    setValueOfFormPathViaRedux(path, value, parentValue, key) {\n      this.context.store.dispatch({\n        type: 'GATESCHEMA_FORM_INPUT_OF_PATH',\n        payload: {\n          name: this.props.name,\n          path,\n          value,\n          parentValue,\n          key\n        }\n      })\n    }\n    transformNode = (node, parentNode) => {\n      const {activePaths} = this\n      const {ignoreErrors} = this.props\n      const {path, error, value, constraints} = node\n      const {type, other = {}} = constraints\n      const form = other.form || {}\n\n      if (form.hidden) {\n        return\n      }\n      let errorMsg\n\n      // collect error\n      if (error && !ignoreErrors[error.keyword]) {\n        this.errors.push(error)\n        errorMsg = error.msg\n      }\n\n      const formItem =  Object.assign({}, form, {\n        path,\n        required: constraints.required,\n        error: (activePaths[path] && errorMsg) || undefined,\n        value,\n        children: node.children,\n        option: constraints.option\n      })\n\n\n      const componentMap = {\n        list: 'List',\n        map: 'Map',\n        string: 'Input',\n        number: 'InputNumber',\n        boolean: 'Switch',\n        enumList: 'Checkbox',\n        enum: 'Radio'\n      }\n\n      let component = formItem.component || (path === '/' ? 'Form' :  componentMap[type])\n\n\n      if (component === 'Select' && type === 'enumList') {\n        formItem.multiple = true\n      }\n\n      if (!formItem.label && parentNode && parentNode.constraints.type !== 'list') {\n        formItem.label = path.slice(path.lastIndexOf('/') + 1)\n      }\n\n      formItem.component = component\n\n      this.cache[path] = {\n        type,\n        item: formItem\n      }\n      return formItem\n    }\n    setFormState(formState) {\n      const state = this.state\n      const {schema, value} = state\n      if (state.formState == null) {\n        this.state = {\n          schema,\n          value,\n          formState\n        }\n      } else {\n        this.setState({\n          schema,\n          value,\n          formState\n        })\n      }\n    }\n    updateValue(path, value, noDebounce) {\n      const rootData = this.props.value\n      const keys = path.split('/').slice(1)\n      const length = keys.length\n      if (length === 0) {\n        return this.setValueOfFormPath('/', value)\n      }\n      let target = rootData || {}\n      if (target !== rootData) {\n        this.setValueOfFormPath('/', target)\n      }\n\n      const lastIndex = length - 1\n      let currentPath = ''\n      for(let i = 0; i < length; i++) {\n        const key = keys[i]\n        currentPath += ('/' + key)\n        if (i < lastIndex) {\n          let child = target[key]\n          if (child == null || typeof child !== 'object') {\n            child = this.cache[currentPath].type === 'list' ? [] : {}\n            this.setValueOfFormPath(currentPath, child, target, key)\n          }\n          target = child\n        } else {\n          this.setValueOfFormPath(currentPath, value, target, key)\n        }\n      }\n      return noDebounce ? this.renderSchema() : this.renderSchemaDebounced()\n    }\n    handleUserInput = (path, value, index) => {\n      let noDebounce = false\n      const type = this.cache[path].type\n      if (type === 'string' && value === '') {\n        value = undefined\n      } else if (type === 'list') {\n        noDebounce = true\n        if (typeof index !== 'undefined') {\n          const activePaths = this.activePaths\n          const newActivePaths = {}\n          const activePathsOfOldValue = []\n          const prefix = path + '/'\n          Object.keys(activePaths).forEach(key => {\n            if (key.indexOf(prefix) === 0) {\n              activePathsOfOldValue.push(key)\n            } else {\n              newActivePaths[key] = true\n            }\n          })\n          const regex = new RegExp('^' + path + '\\\\/(\\\\d)(\\\\/.*)?')\n          let match\n          let idx\n          let appendix\n          activePathsOfOldValue.forEach(oldKey => {\n            match = oldKey.match(regex)\n            idx = ~~match[1]\n            appendix = match[2] || ''\n            if (idx < index) {\n              newActivePaths[oldKey] = true\n            } else if (idx > index) {\n              newActivePaths[prefix + (idx - 1) + appendix] = true\n            }\n          })\n          this.activePaths = newActivePaths\n        }\n      }\n      this.activePaths[path] = true\n      this.pathValidationOptions = {\n        [path]: {\n          skipAsync: false\n        }\n      }\n      this.updateValue(path, value, noDebounce)\n    }\n    handleSubmit = () => {\n      const activePaths = this.activePaths\n      Object.keys(this.cache).forEach(key => {\n        activePaths[key] = true\n      })\n      this.renderSchema(() => {\n        this.props.onSubmit(this.errors)\n      })\n    }\n    handleReset() {\n      this.props.onReset()\n    }\n    renderSchema = (cb) => {\n      const {value, schema} = this.state\n      this.errors = []\n      this.cache = {}\n      const options = {\n        path: '/',\n        value: value,\n        rootData: value,\n        validationOptions: this.validationOptions,\n        pathValidationOptions: this.pathValidationOptions,\n        transform: this.transformNode,\n      }\n      transformer.transform(schema, options, (formState) => {\n        this.setFormState(formState)\n        return cb && cb()\n      })\n    }\n    componentWillReceiveProps(nextProps) {\n      const props = this.props\n      const {value, schema} = nextProps\n      if (props.value !== value || props.schema !== schema) {\n        this.setState({\n          value: value,\n          schema: schema,\n          formState: this.state.formState\n        })\n        this.renderSchema()\n      }\n    }\n    shouldComponentUpdate(nextProps, nextState) {\n      if (this.state.formState === nextState.formState) {\n        return fasle\n      } \n      return true\n    }\n    render() {\n      const {handleSubmit, handleReset, handleUserInput, children} = this\n      const {formState} = this.state\n      return <StateForm \n        state={formState} \n        onSubmit={handleSubmit}\n        onReset={handleReset}\n        onInput={handleUserInput}\n      >\n        {children}\n      </StateForm>\n    }\n    created() {\n      if (this.name) {\n        const name = this.name\n        const mutationsName = vuexModuleName + '/setValueOfFormPath'\n        this.setValueOfFormPath = function(path, value, parentValue, key) {\n          this.$store.commit(mutationsName, {\n            name,\n            path,\n            value,\n            parentValue,\n            key\n          })\n        }\n      }\n\n      this.$watch('schema', {\n        deep: this.isDeepWatchSchema,\n        handler: this.renderSchema\n      })\n\n      this.renderSchemaDebounced = this.debounce \n        ? debounce(this.renderSchema, this.debounce) \n        : this.renderSchema\n      \n      if (this.schema) {\n        this.renderSchemaDebounced()\n      }\n    }\n  }\n  GateSchemaForm.defaultProps = {\n    ignoreErrors: {\n      map: true,\n      list: true\n    }\n  }\n\n  return GateSchemaForm\n}\n\nexport default createForm\n","export default function reducer(state = {}, action = {}) {\n  const {type, payload} = action\n  if (type === 'GATESCHEMA_FORM_INPUT_OF_PATH') {\n   const {name, path, value, parentValue, key} = payload \n   if (path === '/') {\n     return Object.assign({}, state, {\n       [name]: value\n     })\n   } else {\n     parentValue[key] = value\n     return Object.assign({}, state)\n   }\n  }\n  return state\n}"],"names":["options","StateForm","transformer","defaultTransformer","GateSchemaForm","props","context","node","parentNode","activePaths","ignoreErrors","_this2","path","error","value","constraints","type","other","form","hidden","errorMsg","keyword","errors","push","msg","formItem","Object","assign","required","undefined","children","option","component","list","map","string","number","boolean","enumList","enum","multiple","label","slice","lastIndexOf","cache","item","index","noDebounce","newActivePaths","activePathsOfOldValue","prefix","keys","forEach","key","indexOf","match","idx","appendix","regex","RegExp","oldKey","pathValidationOptions","skipAsync","updateValue","renderSchema","onSubmit","cb","state","schema","rootData","validationOptions","transform","transformNode","formState","setFormState","name","debounce","useCache","setValueOfFormPath","setValueOfFormPathViaRedux","setValueOfFormPathDirectly","renderSchemaDebounced","Component","parentValue","store","dispatch","payload","this","setState","split","length","target","lastIndex","currentPath","i","child","_typeof","onReset","nextProps","nextState","fasle","handleSubmit","handleReset","handleUserInput","React","onInput","mutationsName","vuexModuleName","$store","commit","func","wait","tId","$watch","deep","isDeepWatchSchema","handler","clearTimeout","setTimeout","apply","_this","arguments","PropTypes","object","isRequired","any","defaultProps","action"],"mappings":"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"}